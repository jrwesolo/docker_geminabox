#!/usr/bin/env bash

set -e

script_dir="$(readlink -f ${0%/*})"
script_name="${0##*/}"
backup_dir='/backup'
backup_file="${backup_dir}/backup.tar"

# we only want to allow root to execute this
if [[ $EUID -ne 0 ]]; then
  echo "This script must be run as root (ran as $EUID)" >&2
  exit 1
fi

function fix_permissions {
  # fix UID of geminabox user
  if [[ $USER_ID != $GEMINABOX_UID ]]; then
    usermod -u "$USER_ID" "$GEMINABOX_USER"
  fi

  # fix GID of geminabox group
  if [[ $GROUP_ID != $GEMINABOX_GID ]]; then
    groupmod -g "$GROUP_ID" "$GEMINABOX_GROUP"
  fi

  # fix permissions in geminabox folders
  find "$GEMINABOX_CONF" "$GEMINABOX_DATA" \
    \( -not -user "$USER_ID" -o -not -group "$GROUP_ID" \) -print0 |\
    xargs -0rI {} chown -h "$USER_ID":"$GROUP_ID" {}
}

function configure_geminabox {
  echo "---------------------"
  echo "Configuring geminabox"
  echo "---------------------"
  $script_dir/configure_geminabox
}

function configure_webserver {
  echo "---------------------"
  echo "Configuring webserver"
  echo "---------------------"
  $script_dir/configure_webserver
}

function start_webserver {
  echo "------------------"
  echo "Starting webserver"
  echo "------------------"
  exec gosu "${USER_ID}:${GROUP_ID}" puma \
    -C "${GEMINABOX_CONF}/puma.rb"
}

function server {
  configure_geminabox
  configure_webserver
  fix_permissions
  start_webserver
}

function backup {
  if [[ -d $backup_dir ]]; then
    echo "Backing up $GEMINABOX_DATA to $backup_file"
    tar \
      --checkpoint=5000 \
      --checkpoint-action=exec="du -h $backup_file" \
      -cpf $backup_file \
      -C $GEMINABOX_DATA . && \
      du -h $backup_file
  else
    echo "Backup directory missing: $backup_dir" >&2
    exit 2
  fi
}

function restore {
  if [[ -f $backup_file ]]; then
    if [[ ! "$(ls -A "$GEMINABOX_DATA")" ]]; then
      echo "Restoring $backup_file to $GEMINABOX_DATA"
      tar --checkpoint=5000 -xpf $backup_file -C $GEMINABOX_DATA
    else
      echo "$GEMINABOX_DATA directory is not empty, will not perform restore!" >&2
      exit 4
    fi
  else
    echo "Backup file missing: $backup_file" >&2
    exit 3
  fi
}

function usage {
  cat >&2 <<EOF

Usage: ${script_name} [MODE]

Modes (choose one):
    server    default, runs geminabox
    backup    perform backup of geminabox data to tar file
    restore   restores backup of geminabox data from tar file

Server:

This is the default mode. If none is passed,
sync will be assumed.

Backup:

Backing up requires a directory at $backup_dir.
Please be sure to mount this directory when
starting your docker container.

Restore:

Restoring from a backup requires that a
$backup_file file exists. It also requires
that $GEMINABOX_DATA directory is empty. Please
be sure to mount this file when starting
your docker container.
EOF
  exit 1
}

# allow user to override UID and GID
: ${USER_ID:=$GEMINABOX_UID}
: ${GROUP_ID:=$GEMINABOX_GID}

while [[ $1 ]]; do
  case $1 in
    backup|restore|server) mode="$1" ;;
    help) usage ;;
    *)
      echo "Command line option not recognized: $1" >&2
      usage
  esac
  shift
done

: ${mode:='server'}

$mode
